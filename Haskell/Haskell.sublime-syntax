%YAML 1.2
---
# http://www.sublimetext.com/docs/3/syntax.html
name: Haskell
file_extensions:
  - hs
scope: source.haskell

# Based on atom language-haskell
variables:
  id_char: '[\p{Ll}\p{Lu}\p{Lt}\p{Nd}_'']' 
  con_id: '[\p{Lu}\p{Lt}]{{id_char}}*'
  var_id: '[\p{Ll}_]{{id_char}}*'
  reserved_id : 'case|class|data|default|deriving|do|else|foreign|if|import|in|infix|infixl|infixr|instance|let|module|newtype|of|then|type|where|_'
  mod_id: (?:(?:{{con_id}}.)*{{con_id}})
  symbol: '[\p{S}\p{P}&&[^(),;\[\]`{}_"'']]'

  qcon_id: '{{con_id}}(?:\.{{con_id}})*'
  qvar_id: (?:{{qcon_id}}\.)?{{var_id}}
  qvar_sym: (?:{{mod_id}}\.)?{{symbol}}+

  qvar: \b(?:{{qvar_id}}|\({{qvar_sym}}\))
  qvar_op: \b({{qvar_sym}}|`{{qvar_id}}`)

  operator_char: (?:[\p{S}\p{P}&&[^(),;\[\]`{}_"']])
  operator: '{{operator_char}}+'
  operator_fun: (?:\((?!--+\)){{operator}}\))

contexts:
  prototype:
    - include: comments
    - include: preprocessor
    - include: pragma

  main:
    - include: module
    - include: top_decls
    - include: expressions
    - match: \(.*?\)
      comment: So named because I don't know what to call this.
      scope: meta.other.unknown.haskell

  module:
    - match: ^([ \t]*)(module)\b
      captures:
        2: keyword.other.module.haskell
      push:
        - meta_scope: meta.declaration.module.haskell
        - match: (where)
          captures:
            1: keyword.other.where.haskell
          pop: true
        - include: module_name
        - match: \(
          push:
            - meta_scope: meta.declaration.exports.haskell
            - match: \)
              pop: true
            - include: module_exports

  module_name:
    - match: "{{mod_id}}"
      scope: support.other.module.haskell

  module_exports:
    - match: \(\)
      scope: invalid.haskell
    - match: \((\.\.)\)
      captures:
        1: keyword.operator.reserved.haskell
    - match: '\b{{qvar_id}}|\({{qvar_sym}}\)'
      scope: entity.name.function.haskell
    - match: '\b{{qcon_id}}#?'
      scope: storage.type.haskell
    - match: ','
      scope: punctuation.separator.comma.haskell

  top_decls:
    - match: ^([ \t]*)(import)\b
      captures:
        2: keyword.other.import.haskell
      push:
        - meta_scope: meta.import.haskell
        - include: module_name
        - match: (qualified|as|hiding)
          scope: keyword.other.haskell
        - match: \(
          push:
            - meta_scope: meta.declaration.imports.haskell
            - match: (?=\))
              pop: true
            - include: module_exports
        - match: \n|\)
          pop: true

    - match: ^([ \t]*)(type)\b
      captures:
        2: keyword.other.type.haskell
      push:
        - meta_scope: meta.declaration.type.type.haskell
        - match: ^(?!\1[ \t]|[ \t]*$)
          pop: true
        - include: type_signature
        - match: '='
          scope: keyword.operator.haskell
        
    - match: ^([ \t]*)(data|newtype)\b
      captures:
        2: keyword.other.haskell
      push:
        - meta_scope: meta.declaration.type.data.haskell
        - match: ^(?!\1[ \t]|[ \t]*$)
          pop: true
        - include: constrs
        - include: where
        - include: deriving
        - include: type_signature

    - match: ^([ \t]*)(class)\b
      captures:
        2: keyword.other.class.haskell
      push:
        - meta_scope: meta.declaration.class.haskell
        - match: \b(where)\b
          captures:
            1: keyword.other.where.haskell
          pop: true
        - match: \b(Mon(ad|oid)|Functor|Applicative|(Folda|Traversa)ble|Eq|Ord|Read|Show|Num|(Frac|Ra)tional|Enum|Bounded|Real(Frac|Float)?|Integral|Floating)\b
          scope: support.class.prelude.haskell
        - match: "{{qcon_id}}"
          scope: entity.other.inherited-class.haskell
        - match: '\b[a-z][a-zA-Z0-9_'']*\b'
          scope: variable.other.generic-type.haskell
        - match: "(->|→)"
          scope: keyword.other.arrow.haskell
        - match: "(=>|⇒)"
          scope: keyword.other.big-arrow.haskell

    - match: ^([ \t]*)\b(instance)\b
      captures:
        2: keyword.other.instance.haskell
      push:
        - meta_scope: meta.declaration.instance.haskell
        - match: \b(where)\b|$
          captures:
            1: keyword.other.where.haskell
          pop: true
        - include: type_signature
    - match: ^([ \t]*)(default)
    - match: ^([ \t]*)(foreign)

  type_signature:
    - match: "(->|→)"
      scope: keyword.other.arrow.haskell
    - match: "(=>|⇒)"
      scope: keyword.other.big-arrow.haskell
    - match: '\b[a-z][a-zA-Z0-9_'']*\b'
      scope: variable.other.generic-type.haskell
    - match: '\b{{qcon_id}}#?'
      scope: storage.type.haskell
    - match: \(\)
      scope: support.constant.unit.haskell

  constrs:
    - match: '='
      scope: keyword.operator.haskell
      push:
        - match: \|
          scope: punctuation.separator.pipe.haskell
        - match: \{
          scope: keyword.operator.record.begin.haskell
          push:
            - meta_scope: meta.declaration.type.data.record.block.haskell
            - match: \}
              scope: keyword.operator.record.end.haskell
              pop: true
            - include: type_signature

  where:
    - match: where

  deriving:
    - match: \b(deriving)
      captures:
        1: keyword.other.haskell
      push:
        - meta_scope: meta.deriving.haskell
        - match: '\s*\('
          push:
            - match: (?=\))
              pop: true
            - match: '{{qcon_id}}'
              scope: entity.other.inherited-class.haskell
        - match: \)
          pop: true
        - match: '{{qcon_id}}'
          scope: entity.other.inherited-class.haskell
          pop: true

  expressions:
    - match: "(`){{qvar_id}}(`)"
      comment: "In case this regex seems unusual for an infix operator, note that Haskell allows any ordinary function application (elem 4 [1..10]) to be rewritten as an infix expression (4 `elem` [1..10])."
      scope: keyword.operator.function.infix.haskell
      captures:
        1: punctuation.definition.entity.haskell
        2: punctuation.definition.entity.haskell
    - match: \(\)
      scope: constant.language.unit.haskell
    - match: '\[\]'
      scope: constant.language.empty-list.haskell
    - match: \b(deriving|where|data|type|case|of|let|in|newtype|default)\b
      scope: keyword.other.haskell
    - match: '\binfix[lr]?\b'
      scope: keyword.operator.haskell
    - match: \b(do|if|then|else)\b
      scope: keyword.control.haskell
    - match: '\b([0-9]+\.[0-9]+([eE][+-]?[0-9]+)?|[0-9]+[eE][+-]?[0-9]+)\b'
      comment: Floats are always decimal
      scope: constant.numeric.float.haskell
    - match: '\b([0-9]+|0([xX][0-9a-fA-F]+|[oO][0-7]+))\b'
      scope: constant.numeric.haskell
    - include: pragma
    - match: '"'
      scope: punctuation.definition.string.begin.haskell
      push:
        - meta_scope: string.quoted.double.haskell
        - match: $|"
          scope: punctuation.definition.string.end.haskell
          pop: true
        - match: '\\(NUL|SOH|STX|ETX|EOT|ENQ|ACK|BEL|BS|HT|LF|VT|FF|CR|SO|SI|DLE|DC1|DC2|DC3|DC4|NAK|SYN|ETB|CAN|EM|SUB|ESC|FS|GS|RS|US|SP|DEL|[abfnrtv\\\"''\&])'
          scope: constant.character.escape.haskell
        - match: '\\o[0-7]+|\\x[0-9A-Fa-f]+|\\[0-9]+'
          scope: constant.character.escape.octal.haskell
        - match: '\^[A-Z@\[\]\\\^_]'
          scope: constant.character.escape.control.haskell
    - match: '\[(?:|e|d|t|p)\|'
      comment: Points out splices in ast quotes
      scope: keyword.other.quasibracket.haskell
      push:
        - meta_scope: meta.other.quasiquote.haskell
        - match: '(.*)(\|\])'
          captures:
            1: string.quasiquoted.haskell
            2: keyword.other.quasibracket.haskell
          pop: true
        - match: \$\(
          scope: keyword.other.splice.haskell
        - match: \$
          scope: string.quasiquoted.haskell
        - match: "[^$]*"
          scope: string.quasiquoted.haskell
    - match: \$\(
      comment: Highlight the beginning of a splice.
      scope: keyword.other.splice.haskell
    - match: '\[[a-zA-Z0-9_'']*\|'
      scope: keyword.other.quasibracket.haskell
      push:
        - meta_scope: meta.other.quasiquote.haskell
        - match: '(.*)(\|\])'
          captures:
            1: string.quasiquoted.haskell
            2: keyword.other.quasibracket.haskell
          pop: true
        - match: .*
          scope: string.quasiquoted.haskell
    - match: |-
        (?x)
        (')
        (?:
          [\ -\[\]-~]                             # Basic Char
          | (\\(?:NUL|SOH|STX|ETX|EOT|ENQ|ACK|BEL|BS|HT|LF|VT|FF|CR|SO|SI|DLE
            |DC1|DC2|DC3|DC4|NAK|SYN|ETB|CAN|EM|SUB|ESC|FS|GS|RS
            |US|SP|DEL|[abfnrtv\\\"'\&]))       # Escapes
          | (\\o[0-7]+)                             # Octal Escapes
          | (\\x[0-9A-Fa-f]+)                       # Hexadecimal Escapes
          | (\^[A-Z@\[\]\\\^_])                     # Control Chars
        )
        (')
      scope: string.quoted.single.haskell
      captures:
        1: punctuation.definition.string.begin.haskell
        2: constant.character.escape.haskell
        3: constant.character.escape.octal.haskell
        4: constant.character.escape.hexadecimal.haskell
        5: constant.character.escape.control.haskell
        6: punctuation.definition.string.end.haskell
    - match: '^([ \t]*)({{qvar_id}}|{{operator_fun}})\s*(::|∷)'
      captures:
        2: entity.name.function.haskell
        3: keyword.other.double-colon.haskell
      push:
        - meta_scope: meta.function.type-declaration.haskell
        - match: ^(?!\1[ \t]|[ \t]*$)
          pop: true
        - include: type_signature
    - include: operator
    - match: '\b{{qvar_id}}#?'
      scope: identity.haskell
    - match: '\b{{qcon_id}}#?'
      scope: constant.other.haskell
    # - include: comments
    # - include: infix_op
    # - match: '{{operator_fun}}'
    #   clear: true
    - match: ","
      scope: punctuation.separator.comma.haskell

  comments:
    - match: --+(?!{{operator_char}})
      scope: punctuation.definition.comment.haskell
      push:
        - meta_scope: comment.line.double-dash.haskell
        - match: $\n?
          pop: true
    - include: block_comment

  block_comment:
    - match: '\{-(?!#)'
      scope: punctuation.definition.comment.begin.haskell
      push:
        - meta_scope: comment.block.haskell
        - match: '\{-#'
          push:
            - match: '-\}'
              pop: true
            - include: block_comment
        - include: block_comment
        - match: '-\}'
          scope: punctuation.definition.comment.end.haskell
          pop: true

  preprocessor:
    - match: ^\s*(#\s*(?:if|ifdef|ifndef|elif|else|endif))\b
      comment: In addition to Haskell's "native" syntax, GHC permits the C preprocessor to be run on a source file.
      captures:
        1: keyword.control.import.c
      push:
        - meta_scope: meta.preprocessor.c
        - match: $\n
          pop: true

  infix_op:
    - match: \(
      push:
        - meta_scope: entity.name.function.infix.haskell
        - match: \)
          pop: true
        - include: operators
          # - match: '({{operator_fun}})'
          # scope: entity.name.function.infix.haskell

  operators:
    # In case this regex seems overly general, note that Haskell permits 
    # the definition of new operators which can be nearly any string of 
    # punctuation characters, such as $%^&*.
    - match: '\.\.|:|::|=|\|<-|->|@|~|=>'
      scope: keyword.operator.reserved.haskell
    - match: '({{mod_id}}\.)?(:{{symbol}}+)'
      captures:
        1: keyword.operator.constructor.qualified.haskell
        2: keyword.operator.constructor.haskell
    - match: '({{mod_id}}\.)?({{symbol}}+)'  # except <dashes>
      captures:
        1: keyword.operator.constructor.qualified.haskell
        2: keyword.operator.constructor.haskell

  operator_symbols:
    - match: '\.\.|:|::|=|\|<-|->|@|~|=>'
      scope: keyword.operator.reserved.haskell
    - match: ':{{symbol}}+'
      scope: keyword.operator.constructor.haskell
    - match: '{{symbol}}+'  # except <dashes>
      scope: keyword.operator.variable.haskell
  
  pragma:
    - match: '\{-#'
      push:
        - meta_scope: meta.preprocessor.haskell
        - match: '#-\}'
          pop: true
        - match: \b(ANN|CFILES|CONLIKE|CONSTRUCTORLIKE|CONTRACT|CORE|CTYPE|DEPRECATED|GENERATED|INCLUDE|INCOHERENT|INLINABLE|INLINEABLE|INLINE|INLINE|LANGUAGE|LINE|MINIMAL|NOINLINE|NOTINLINE|NOUNPACK|NOVECTORISE|NOVECTORIZE|OPTIONS_CATCH|OPTIONS_DERIVE|OPTIONS_GHC|OPTIONS_HADDOCK|OPTIONS_HUGS|OPTIONS_JHC|OPTIONS_NHC98|OPTIONS_YHC|OPTIONS|OVERLAPPABLE|OVERLAPPING|OVERLAPS|RULES|SCALAR|SCCSOURCE|SPECIALISE|SPECIALIZE|UNPACK|VECTORISE|VECTORIZE|WARNING)\b
          scope: keyword.other.preprocessor.haskell
